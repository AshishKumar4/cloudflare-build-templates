[
  {
    "name": "next-llm-chat-runner",
    "language": "typescript",
    "frameworks": [
      "@dnd-kit",
      "@hookform/resolvers",
      "autoprefixer",
      "class-variance-authority",
      "cloudflare",
      "clsx",
      "cmdk",
      "concurrently",
      "critters",
      "date-fns",
      "framer-motion",
      "immer",
      "input-otp",
      "next",
      "openai",
      "postcss",
      "react",
      "recharts",
      "sonner",
      "swc",
      "swr",
      "tailwind",
      "typescript",
      "vaul",
      "wrangler",
      "zod",
      "zustand"
    ],
    "description": {
      "selection": "# Template Selection Guidelines\n\nThis template provides a simple LLM chat with openai sdk through Cloudflare AI Gateway, featuring a beautiful glass morphism UI and multi-modal capabilities.\n\n* Use this template when you need:\n  * Simple AI chat applications with OpenAI/Gemini integration\n  * Beautiful, responsive chat UI with animations\n  * Production-ready security and input validation\n  * Real-time conversation management\n  * Real-time streaming chat\n\n* Do not use it for:\n  * Simple static websites without AI functionality\n  * Applications that don't need chat interfaces\n  * Complex AI applications with tools and MCP integration\n  * Projects requiring complex multi-user chat rooms\n\n* Built with:\n  * **Next.js (Page Router)** for server-side API routes and client-side chat UI\n  * **OpenAI SDK** for AI model integration via Cloudflare AI Gateway\n  * **Tailwind CSS** with glass morphism effects and responsive design\n  * **Framer Motion** for smooth chat animations and loading states\n  * **Shadcn/UI** components for polished interface elements\n  * **TypeScript** for type safety and better developer experience",
      "usage": "# Usage instructions\n\nYou can start customizing the template homepage by modifying `pages/index.tsx`. The page auto-updates as you edit the file.\n\nThe chat API can be accessed on [http://localhost:3000/api/chat](http://localhost:3000/api/chat) and is defined in `pages/api/chat.ts`. **Use it!**\n\nThe `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as API routes instead of React pages.\n\n- Built with:\n  * **Next.js (Page Router)** for hybrid static/server rendering and API routes\n  * **OpenAI SDK** for AI model integration via Cloudflare AI Gateway\n  * **Tailwind CSS** for utility-first styling with glass morphism effects\n  * **Framer Motion** for smooth chat animations and loading states\n  * **Lucide Icons** (React) for modern, consistent iconography\n  * **Shadcn/UI** for accessible chat components built on Radix UI primitives\n  * **TypeScript** for type safety and better developer experience\n\n- Chat Features:\n  * **Multi-modal input**: Supports both text messages and image uploads\n  * **Model selection**: Switch between GPT-4o, Gemini 2.0 Flash, Gemini 2.5 Flash/Pro powered by Cloudflare AI gateway\n  * **Conversation memory**: Maintains chat history during session\n  * **Security**: Input validation, sanitization, and secure API key handling\n\n- Restrictions:\n  * **Environment variables**: CF_AI_BASE_URL and CF_AI_API_KEY must be set (they will be set for you)\n  * **API keys**: Never expose API keys to client-side - they're server-side only\n  * **Image validation**: Only accepts valid base64 data URLs for images\n  * **Use Page router** and not App router for Next.js\n\n- Styling:\n  * Must generate **fully responsive** and beautiful UI\n  * Use Shadcn preinstalled components rather than writing custom ones when possible\n  * Use **Tailwind's spacing, layout, and typography utilities** for all components\n\n- Components:\n  * All Shadcn components are available and can be imported from `@/components/ui/...`\n  * Current chat uses: `Button`, `Input`, `Card`, `Select` for the interface\n  * Do not write custom components if shadcn components are available\n  * Icons from Lucide should be imported directly from `lucide-react`\n\n- Animation:\n  * Use `framer-motion`'s `motion` components for animations\n  * Animate message appearances, loading states, and UI transitions\n  * You can integrate variants and transitions using Tailwind utility classes alongside motion props\n\n---\n\nComponents available:\n```sh\n$ ls -1 src/components/ui\naccordion.tsx\nalert-dialog.tsx\nalert.tsx\naspect-ratio.tsx\navatar.tsx\nbadge.tsx\nbreadcrumb.tsx\nbutton.tsx\ncalendar.tsx\ncard.tsx\ncarousel.tsx\nchart.tsx\ncheckbox.tsx\ncollapsible.tsx\ncommand.tsx\ncontext-menu.tsx\ndialog.tsx\ndrawer.tsx\ndropdown-menu.tsx\nform.tsx\nhover-card.tsx\ninput-otp.tsx\ninput.tsx\nlabel.tsx\nmenubar.tsx\nnavigation-menu.tsx\npagination.tsx\npopover.tsx\nprogress.tsx\nradio-group.tsx\nresizable.tsx\nscroll-area.tsx\nselect.tsx\nseparator.tsx\nsheet.tsx\nsidebar.tsx\nskeleton.tsx\nslider.tsx\nsonner.tsx\nswitch.tsx\ntable.tsx\ntabs.tsx\ntextarea.tsx\ntoast.tsx\ntoggle-group.tsx\ntoggle.tsx\ntooltip.tsx\n```"
    }
  },
  {
    "name": "c-code-react-runner",
    "language": "typescript",
    "frameworks": [
      "@dnd-kit",
      "@hookform/resolvers",
      "autoprefixer",
      "class-variance-authority",
      "cloudflare",
      "clsx",
      "cmdk",
      "date-fns",
      "framer-motion",
      "hono",
      "immer",
      "input-otp",
      "next",
      "postcss",
      "react",
      "recharts",
      "sonner",
      "tailwind",
      "tw-animate-css",
      "typescript",
      "vaul",
      "vite",
      "zod",
      "zustand"
    ],
    "description": {
      "selection": "# Template Selection Guidelines\n\nThis template provides a minimal but powerful setup to kickstart a modern React single-page application (SPA).\n\n- Use this template when you need:\n    * Client side heavy projects with lightweight or minimal backend\n    * Static applications \n    * Dashboards with mostly client side code\n    * Simple, fast projects that are suitable for Vite\n\n- Do not use it for\n    * Static marketing sites\n    * Landing pages focused on SEO or server-rendered content\n    * Projects that require SSR (Server-Side Rendering)\n    * Projects that require a lot of backend or server-side stuff\n\n- Built with\n    * React Router 6 for declarative client-side routing\n    * ShadCN UI (v2.3.0) for customizable and accessible UI components built on Radix UI primitives\n    * Tailwind CSS for utility-first styling\n    * Lucide Icons (React) for modern and lightweight iconography\n    * ESLint with sensible defaults and TypeScript support\n    * Vite for ultra-fast local development and builds",
      "usage": "# Usage instructions\n\n- Built with\n    * React Router 6 for declarative client-side routing\n    * ShadCN UI (v2.3.0) for customizable and accessible UI components built on Radix UI primitives\n    * Tailwind CSS for utility-first styling\n    * Lucide Icons (React) for modern and lightweight iconography\n    * ESLint with sensible defaults and TypeScript support\n    * Cloudflare Workers for serving and server-side processing\n\n- Restrictions:\n  * When including `tailwind.config.js`, **hardcode custom colors** directly in the config file â€“ do **not** define them in `index.css` unless specified\n\n- Styling:\n  * Must generate **fully responsive** and accessible layouts\n  * Use Shadcn preinstalled components rather than writing custom ones when possible\n  * Use **Tailwind's spacing, layout, and typography utilities** for all custom components\n\n- Components\n  * All Shadcn components are available and can be imported from @/components/ui/...\n  * Do not write custom components if shadcn components are available\n  * Icons from Lucide should be imported directly from `lucide-react`\n\n**NOTE: ErrorBoundary and related Error handling components and code are already implemented but hidden**\n\n- Animation:\n  * Use `framer-motion`'s `motion` components to animate sections on scroll or page load\n  * You can integrate variants and transitions using Tailwind utility classes alongside motion props\n\nComponents available:\n```sh\n$ ls -1 src/components/ui\naccordion.tsx\nalert-dialog.tsx\nalert.tsx\naspect-ratio.tsx\navatar.tsx\nbadge.tsx\nbreadcrumb.tsx\nbutton.tsx\ncalendar.tsx\ncard.tsx\ncarousel.tsx\nchart.tsx\ncheckbox.tsx\ncollapsible.tsx\ncommand.tsx\ncontext-menu.tsx\ndialog.tsx\ndrawer.tsx\ndropdown-menu.tsx\nform.tsx\nhover-card.tsx\ninput-otp.tsx\ninput.tsx\nlabel.tsx\nmenubar.tsx\nnavigation-menu.tsx\npagination.tsx\npopover.tsx\nprogress.tsx\nradio-group.tsx\nresizable.tsx\nscroll-area.tsx\nselect.tsx\nseparator.tsx\nsheet.tsx\nsidebar.tsx\nskeleton.tsx\nslider.tsx\nsonner.tsx\nswitch.tsx\ntable.tsx\ntabs.tsx\ntextarea.tsx\ntoast.tsx\ntoggle-group.tsx\ntoggle.tsx\ntooltip.tsx\n```\n\nUsage Example:\n```tsx file=\"example.tsx\"\n        import { Button } from '@/components/ui/button'\n        import { CardContent, Card } from '@/components/ui/card'\n        import { MousePointerClickIcon } from 'lucide-react';\n        // custom hook for example ignore\n        import { useStopwatch } from '../hooks/useStopwatch'\n\n        export default function Stopwatch({ initialTime = 0 }) {\n        const { time, isRunning, start, pause, reset } = useStopwatch(initialTime);\n\n        return (\n          <Card className=\"w-full max-w-md\">\n            <CardContent className=\"flex flex-col items-center justify-center gap-4 p-4\">\n              <div \n                className=\"text-6xl font-bold tabular-nums\" \n                aria-live=\"polite\"\n                aria-atomic=\"true\"\n              >\n                {time}\n              </div>\n              <div className=\"flex gap-4\">\n                <Button \n                  onClick={isRunning ? pause : start}\n                  aria-pressed={isRunning}\n                >\n                  <MousePointerClickIcon className=\"text-yellow-400 size-4\" />\n                  {isRunning ? 'Pause' : 'Start'}\n                </Button>\n                <Button \n                  onClick={reset}\n                  disabled={time === 0 && !isRunning}\n                >\n                  Reset\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )\n        }\n```\n\nThe backend routes (worker logic) are defined in the `worker/index.ts` file. For any server-side processing, define appropriate routes, types and controllers in the worker, **BUT BE CAREFUL** You can easily break everything so make sure you follow the **exact** pattern in the worker file to add any new routes"
    }
  },
  {
    "name": "c-code-next-runner",
    "language": "typescript",
    "frameworks": [
      "@dnd-kit",
      "@hookform/resolvers",
      "autoprefixer",
      "class-variance-authority",
      "cloudflare",
      "clsx",
      "cmdk",
      "critters",
      "date-fns",
      "framer-motion",
      "immer",
      "input-otp",
      "next",
      "postcss",
      "react",
      "recharts",
      "sonner",
      "swc",
      "swr",
      "tailwind",
      "typescript",
      "vaul",
      "wrangler",
      "zod",
      "zustand"
    ],
    "description": {
      "selection": "# Template Selection Guidelines\n\nThis template offers a streamlined and performant foundation for building beautiful, responsive landing pages with modern animations and iconography.\n\n* Use this template when you need:\n  * High-performance server-side heavy projects and dashboards\n  * Pages optimized for SEO with server-rendered content\n  * Responsive design with smooth scrolling and page transitions\n  * Easily customizable layouts for product launches, waitlists, or portfolios\n  * Design-first experiences with animation and interactivity\n\n* Do not use it for:\n  * Lightweight, mostly client side heavy projects\n  * Static pages\n\n* Built with:\n  * **Next.js (Page Router)** for hybrid static & server rendering, built-in SEO, and routing\n  * **Tailwind CSS** for rapid UI development with utility-first styling\n  * **Lucide Icons** for sleek, consistent iconography\n  * **Framer Motion** for intuitive, production-ready animations\n  * **TypeScript** and **ESLint** for type safety and code quality",
      "usage": "# Usage instructions\n\nYou can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.\n\nAPI routes can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.\n\nThe `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as API routes instead of React pages.\n\n- Built with:\n  * Next.js (Page Router) for hybrid static/server rendering and SEO optimization\n  * Tailwind CSS** for utility-first styling and rapid prototyping\n  * Lucide Icons** (React) for modern, consistent iconography\n  * Framer Motion** for smooth, production-ready animations\n  * ESLint and TypeScript for linting and type safety out of the box\n  * ShadCN UI** (v2.3.0) for customizable and accessible UI components built on Radix UI primitives\n\n- Restrictions:\n  * When including `tailwind.config.js`, **hardcode custom colors** directly in the config file â€“ do **not** define them in `globals.css` unless specified\n  * Next.js cannot infer props for React Components, so YOU MUST provide default props\n  * Use Page router and not App router\n\n- Styling:\n  * Must generate **fully responsive** and accessible layouts\n  * Use Shadcn preinstalled components rather than writing custom ones when possible\n  * Use **Tailwind's spacing, layout, and typography utilities** for all components\n\n- Components:\n  * All Shadcn components are available and can be imported from @/components/ui/...\n  * Do not write custom components if shadcn components are available\n  * Icons from Lucide should be imported directly from `lucide-react`\n\n- Animation:\n  * Use `framer-motion`'s `motion` components to animate sections on scroll or page load\n  * You can integrate variants and transitions using Tailwind utility classes alongside motion props\n\n---\n\nComponents available:\n```sh\n$ ls -1 src/components/ui\naccordion.tsx\nalert-dialog.tsx\nalert.tsx\naspect-ratio.tsx\navatar.tsx\nbadge.tsx\nbreadcrumb.tsx\nbutton.tsx\ncalendar.tsx\ncard.tsx\ncarousel.tsx\nchart.tsx\ncheckbox.tsx\ncollapsible.tsx\ncommand.tsx\ncontext-menu.tsx\ndialog.tsx\ndrawer.tsx\ndropdown-menu.tsx\nform.tsx\nhover-card.tsx\ninput-otp.tsx\ninput.tsx\nlabel.tsx\nmenubar.tsx\nnavigation-menu.tsx\npagination.tsx\npopover.tsx\nprogress.tsx\nradio-group.tsx\nresizable.tsx\nscroll-area.tsx\nselect.tsx\nseparator.tsx\nsheet.tsx\nsidebar.tsx\nskeleton.tsx\nslider.tsx\nsonner.tsx\nswitch.tsx\ntable.tsx\ntabs.tsx\ntextarea.tsx\ntoast.tsx\ntoggle-group.tsx\ntoggle.tsx\ntooltip.tsx\n```\n\n### Usage Example\n\n```tsx file=\"src/components/Hero.tsx\"\n'use client'\n\nimport { motion } from 'framer-motion'\nimport { ArrowRightIcon } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\n\nexport function Hero() {\n  return (\n    <section className=\"w-full bg-white py-20 text-center\">\n      <motion.div \n        initial={{ opacity: 0, y: 30 }} \n        animate={{ opacity: 1, y: 0 }} \n        transition={{ duration: 0.6 }}\n        className=\"mx-auto max-w-2xl px-6\"\n      >\n        <h1 className=\"text-4xl font-bold tracking-tight sm:text-5xl\">\n          Build Stunning Landing Pages Fast\n        </h1>\n        <p className=\"mt-4 text-gray-600\">\n          A modern Next.js starter with Tailwind, Framer Motion, and Lucide.\n        </p>\n        <div className=\"mt-6 flex justify-center\">\n          <Button className=\"inline-flex items-center gap-2 rounded-md bg-black px-6 py-3 text-white hover:bg-gray-900 transition\">\n            Get Started\n            <ArrowRightIcon className=\"size-4\" />\n          </Button>\n        </div>\n      </motion.div>\n    </section>\n  )\n}\n```"
    }
  },
  {
    "name": "vite-cfagents-runner",
    "language": "typescript",
    "frameworks": [
      "@dnd-kit",
      "@hookform/resolvers",
      "@modelcontextprotocol",
      "agents",
      "autoprefixer",
      "class-variance-authority",
      "clsx",
      "cmdk",
      "date-fns",
      "framer-motion",
      "hono",
      "immer",
      "input-otp",
      "mcp-client",
      "mcp-remote",
      "next",
      "openai",
      "postcss",
      "react",
      "recharts",
      "sonner",
      "tailwind",
      "tw-animate-css",
      "typescript",
      "vaul",
      "vite",
      "zod",
      "zustand"
    ],
    "description": {
      "selection": "# Template Selection Guidelines\n\nThis template provides a production-ready AI agent chatbot built with Cloudflare Agents SDK, featuring intelligent tool usage and multi-model support as well as control plane durable objects for session management.\n\n* Use this template when you need:\n  * AI chat applications with intelligent tool/function calling capabilities\n  * Agent-based chatbots using production Cloudflare MCP servers\n  * Cloudflare Workers deployment with Durable Objects persistence\n  * Beautiful, responsive chat UI with tool interaction visualization\n  * Multi-model AI support (GPT-4o, Gemini 2.0/2.5, Claude Opus 4)\n  * Production-ready MCP integration with official TypeScript SDK\n  * Web browsing and tool calling capabilities\n  * Persistent conversations using Durable Objects\n  * Real-time conversation management\n  * Real-time streaming chat\n  * Advanced AI Agents capabilities and AI based applications\n  * Durable objects for control plane for database or session management\n\n* Do not use it for:\n  * Simple static websites without AI functionality\n  * Applications that don't need advanced AI capabilities\n  * Projects requiring complex multi-user chat rooms or real-time streaming\n  * Simple question-answer bots without tool requirements\n\n* Built with:\n  * **Cloudflare Agents SDK** for stateful agent management with Durable Objects\n  * **Official MCP TypeScript SDK** for proper protocol implementation\n  * **React + Vite** for fast, modern frontend development\n  * **OpenAI SDK** for AI model integration via Cloudflare AI Gateway\n  * **Production Cloudflare MCP Servers** (Documentation and Browser)\n  * **Tailwind CSS** with glass morphism effects and responsive design\n  * **Framer Motion** for smooth chat animations and loading states\n  * **Shadcn/UI** components for polished interface elements\n  * **TypeScript** for type safety and extensible architecture\n  * **Validated MCP Integration** using official schemas and transports\n  * **Durable Objects** for control plane for database or session management, as well as agent management",
      "usage": "# Usage Instructions\n\nYou can start customizing the template frontend by modifying `src/App.tsx`. The page auto-updates as you edit the file.\n\nThe chat API is powered by Cloudflare Agents (Which is a wrapper on Durable Objects) and accessible through the worker at `/api/chat/:sessionId/*` routes defined in `worker/userRoutes.ts`. **Use it!**\n\nThe agent system uses Durable Objects for persistent state management and conversation history. `/api/chat/:sessionId/*` should be used without modifications for any conversation support. There is also a control plane durable object for session management name AppController.\n\n- Built with:\n  * **React + Vite** for fast frontend development with hot module replacement\n  * **Cloudflare Agents SDK** for stateful agent management with persistent Durable Objects\n  * **Model Context Protocol (MCP)** client for real server integration\n  * **OpenAI SDK** for AI model integration via Cloudflare AI Gateway\n  * **Production MCP Servers** including Cloudflare Bindings and Observability\n  * **Tailwind CSS** for utility-first styling with glass morphism effects\n  * **Framer Motion** for smooth chat animations and loading states\n  * **Lucide Icons** (React) for modern, consistent iconography\n  * **Shadcn/UI** (v2.3.0) for accessible chat components built on Radix UI primitives\n  * **TypeScript** for type safety and extensible architecture\n  * **Durable Objects** for control plane for database or session management\n\n- Agent Features:\n  * **Real MCP Integration**: Connects to actual MCP servers, not simulated implementations\n  * **Cloudflare MCP Servers**: Direct integration with Cloudflare Bindings and Observability servers\n  * **Intelligent Tool Usage**: AI automatically detects when to use tools (D1, R2, Workers, Web browsing)\n  * **Multi-Model Support**: Switch between GPT-4o, Gemini 2.0/2.5 Flash/Pro, Claude Opus 4\n  * **Production Tools**: Query D1 databases, manage R2 buckets, get Worker analytics\n  * **Web Browsing**: Browse and extract content from web pages through MCP server\n  * **Persistent Conversations**: Maintains chat history using Durable Objects state in Cloudflare Agents.\n  * **Tool Visualization**: Shows which tools were used with results in the chat interface\n\n- Adding New MCP Servers:\n  * **Step 1**: Add server configuration to `initializeCloudflareServers()` in `worker/mcp-client.ts`\n  * **Step 2**: Tools are automatically discovered and registered from MCP server definitions\n  * **Step 3**: The system automatically routes tool calls to appropriate MCP servers\n  * **Real Protocol**: Uses actual MCP protocol for server communication, not simulation\n\n- Environment Variables:\n  * **CF_AI_BASE_URL**: Cloudflare AI Gateway base URL (required)\n  * **CF_AI_API_KEY**: API key for AI Gateway access (required)\n  * **CHAT_AGENT**: Durable Object binding name for agent persistence\n\n- Restrictions:\n  * **Environment variables**: CF_AI_BASE_URL and CF_AI_API_KEY must be configured\n  * **API keys**: Never expose API keys to client-side - they're server-side only in worker\n  * **Tool Safety**: Tool functions should validate inputs and handle errors gracefully\n  * **Use Agents SDK patterns**: Extend Agent class, use setState for persistence\n\n- Styling:\n  * Must generate **fully responsive** and beautiful UI with agent-focused design\n  * Use Shadcn preinstalled components rather than writing custom ones when possible\n  * Use **Tailwind's spacing, layout, and typography utilities** for all components\n  * Include tool interaction indicators and loading states for better UX\n\n- Components:\n  * All Shadcn components are available and can be imported from `@/components/ui/...`\n  * Current chat uses: `Button`, `Input`, `Card`, `Select`, `Badge` for the interface\n  * Tool results are displayed with badges and icons from the UI library\n  * Do not write custom components if shadcn components are available\n  * Icons from Lucide should be imported directly from `lucide-react`\n\n- Animation:\n  * Use `framer-motion`'s `motion` components for chat message animations\n  * Animate tool usage indicators, model selection, and loading states\n  * You can integrate variants and transitions using Tailwind utility classes alongside motion props\n\n- Worker Architecture (Backend, APIs):\n  * **`worker/agent.ts`**: Main agent class \n  * **`worker/userRoutes.ts`**: HTTP routing for agent API and session managementÃ¥\n  * **`worker/chat.ts`**: OpenAI integration and conversation logic  \n  * **`worker/mcp-client.ts`**: MCP client for real server integration\n  * **`worker/tools.ts`**: Tool routing and MCP server coordination\n  * **`worker/config.ts`**: Centralized configuration and supported models\n  * **`worker/types.ts`**: TypeScript interfaces and type definitions\n  * **`worker/app-controller.ts`**: Control plane durable object for session management\n\n---\n\n## Available MCP Servers and Tools\n\nThe template uses the official MCP SDK with Cloudflare's production servers:\n\n### Cloudflare Documentation MCP Server:\n- Access to Cloudflare documentation and resources\n- Connected via `https://docs.mcp.cloudflare.com/sse`\n\n### Cloudflare Browser MCP Server:\n- Web browsing capabilities through Cloudflare\n- Connected via `https://browser.mcp.cloudflare.com/sse`\n\n### Custom Tools:\n- **`get_weather`** - Weather information (example custom tool)\n\n### MCP Server Integration Example\n\nAdding a new MCP server (in `worker/mcp-client.ts`):\n\n```typescript\nconst MCP_SERVERS: MCPServerConfig[] = [\n  {\n    name: 'cloudflare-docs',\n    command: 'npx',\n    args: ['mcp-remote', 'https://docs.mcp.cloudflare.com/sse']\n  },\n];\n```\n\nThe system automatically:\n- Connects to MCP servers using proper transport\n- Uses official MCP SDK schemas for validation\n- Discovers tools with proper error handling\n- Routes tool calls to the correct server\n- Parses results using MCP result schemas\n\nComponents available:\n```sh\n$ ls -1 src/components/ui\naccordion.tsx\nalert-dialog.tsx\nalert.tsx\naspect-ratio.tsx\navatar.tsx\nbadge.tsx\nbreadcrumb.tsx\nbutton.tsx\ncalendar.tsx\ncard.tsx\ncarousel.tsx\nchart.tsx\ncheckbox.tsx\ncollapsible.tsx\ncommand.tsx\ncontext-menu.tsx\ndialog.tsx\ndrawer.tsx\ndropdown-menu.tsx\nform.tsx\nhover-card.tsx\ninput-otp.tsx\ninput.tsx\nlabel.tsx\nmenubar.tsx\nnavigation-menu.tsx\npagination.tsx\npopover.tsx\nprogress.tsx\nradio-group.tsx\nresizable.tsx\nscroll-area.tsx\nselect.tsx\nseparator.tsx\nsheet.tsx\nsidebar.tsx\nskeleton.tsx\nslider.tsx\nsonner.tsx\nswitch.tsx\ntable.tsx\ntabs.tsx\ntextarea.tsx\ntoast.tsx\ntoggle-group.tsx\ntoggle.tsx\ntooltip.tsx\n```\n\n# Important Notes\n- Conversations and persistence are already handled by the template. Utilize existing utilities and apis to build something greater."
    }
  }
]